# Default values for codedx.

# codedxTomcatImage specifies the image to use for the Code Dx deployment.
# ref: https://hub.docker.com/r/codedx/codedx-tomcat/tags
#
codedxTomcatImage: codedx/codedx-tomcat:v5.0.3

# codedxTomcatImagePullPolicy specifies the policy to use when pulling the Code Dx Tomcat image.
# ref: https://kubernetes.io/docs/concepts/configuration/overview/#container-images
#
codedxTomcatImagePullPolicy: IfNotPresent

# codedxTomcatImagePullSecrets allows you to specify names of secrets to use
# for pulling the Code Dx image.
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/#create-a-pod-that-uses-your-secret
#
codedxTomcatImagePullSecrets: []

# codedxTomcatPort determines the port that the Code Dx Service will be exposed on.
#
codedxTomcatPort: 9090

# codedxTlsTomcatPort determines the TLS port that the Code Dx Service will be exposed on. This
# gets ignored when codedxTls.enabled=false.
#
codedxTlsTomcatPort: 9443

# codedxJavaOpts lets you add custom Java runtime options for Code Dx.
#
codedxJavaOpts: "-XX:MaxRAMPercentage=90.0"

# codedxAdminPassword is used when creating the Code Dx "admin" account during the
# installation process. After installation, you can sign in with "admin" and the
# value assigned here.
#
codedxAdminPassword: ""

# cacertsFile can be used to provide a set of custom Java certificates for Code Dx to use. This is
# necessary for LDAPS and integration with some external tools. This value is the path to a local
# file that will be mounted in the Code Dx container at `/usr/local/openjdk-8/jre/lib/security/cacerts`. 
# If undefined (or empty), the default `cacerts` file will be used.
#
# _Note: This is a Local File Value and will only work if installing this chart from source.
#
cacertsFile: ""

# cacertsFilePwd provides the password for the cacertsFile specified. Set to 'changeit' when the
# cacertsFile value is unset/empty so that Code Dx can access the default Java cacerts file.
#
cacertsFilePwd: 'changeit'

# serviceAccount options for Code Dx.
# Determine the name of the service account to run Code Dx with, and whether to create the ServiceAccount.
# - If create=true but name=undefined - Will create and use an auto-named service account
# - If create=false but name!=undefined - Will assign the named service account to the Code Dx deployment
# - If create=true and name!=undefined - Will create a service account with the given name and use it for the Code Dx deployment
# - If create=false and name=undefined - Will use 'default' service account for the Code Dx deployment
#
serviceAccount:
  # serviceAccount.create flag can auto-create and use a ServiceAccount for the Code Dx deployment.
  # Will use the given name if provided, otherwise will auto-generate a name.
  #
  create: true

  # serviceAccount.name specifies the name of the ServiceAccount for Code Dx to use. If this is set
  # and create is false, we assume a ServiceAccount already exists with that name and try to use it.
  #
  name:

# Configure the creation and use of a PodSecurityPolicy for the Code Dx deployment.
# ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/
#
podSecurityPolicy:
  codedx:
    # The flag podSecurityPolicy.codedx.create can create a suitable PSP for Code Dx
    # with the given name (or auto-generate a name if undefined.)
    #
    create: true

    # podSecurityPolicy.codedx.name assigns the name of the PSP to create and/or use. (optional)
    #
    name:

    # The flag podSecurityPolicy.codedx.bind determines whether or not to create a Role
    # and RoleBinding to use this PSP with the service account described in serviceAccount.
    #
    bind: true

    # Use podSecurityPolicy.codedx.annotations to attach custom annotations to the
    # PodSecurityPolicy created here. (Does nothing if create = false.)
    #
    annotations: {}

  mariadb:
    # The flag podSecurityPolicy.mariadb.create can create a suitable PSP for MariaDB
    # with the given name (or auto-generate a name if undefined.)
    #
    create: true

    # podSecurityPolicy.mariadb.name assigns the name of the PSP to create and/or use. (optional)
    #
    name:

    # The flag podSecurityPolicy.mariadb.bind determines whether or not to create a Role
    # and RoleBinding to use this PSP with the service account named in mariadb.serviceAccount.
    #
    bind: true

    # Use podSecurityPolicy.mariadb.annotations to attach custom annotations to the
    # PodSecurityPolicy created here. (Does nothing if create = false.)
    #
    annotations: {}


# Configure NetworkPolicies to restrict which pods can connect with other pods.
# (Each created network policy will include an egress rule on port 53 to any target for DNS.)
# ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
#
networkPolicy:
  # A NetworkPolicy for Code Dx will limit its egress to MariaDB instances, and allow
  # ingress from port 8080/8443. (This is implicitly applied to the "codedxTomcatPort"
  # and "codedxTlsTomcatPort" exposed by the generated k8s service.)
  #
  codedx:

    # The flag networkPolicy.codedx.create can be used to create a NetworkPolicy with suitable ingress
    # and egress rules, configured to select only the Code Dx pod.
    #
    create: true

    # The flags networkPolicy.codedx.ldap,ldaps,http,https can create egress rules for Code Dx on those ports.
    # These rules will allow *all* egress from the Code Dx pod on those ports. (Note that setting 'http' or
    # 'https' to 'false' will be ignored if 'dependencyCheck' is set to 'true'.)
    #
    ldap: false
    ldaps: false
    http: false
    https: false

    # This flag indicates whether we can expect Dependency-Check to be used within Code Dx. Dependency-Check
    # requires access to various websites to download CVE data and package repository data. If 'true',
    # an egress rule will be created allowing all egress from Code Dx on ports 80 and 443. (The actual
    # target IPs used by Dependency-Check can vary, so specific whitelisted targets can't be used.)
    # Setting this flag to 'true' is equivalent to setting 'http' and 'https' to 'true'.
    #
    # see: https://jeremylong.github.io/DependencyCheck/data/index.html
    #
    dependencyCheck: true

    # This flag will create an egress rule from Code Dx to a Tool Orchestration Service on port 3333,
    # and create an ingress rule to Code Dx on port 8080/8443. If no selector is set via toolServiceSelectors,
    # this will allow *all* egress from the Code Dx pod on port 3333 and allow *all* ingress to the
    # Code Dx pod on port 8080/8443.
    #
    toolService: false

    # This flag is used to specify the egress target for Code Dx on port 3333, enabling connection
    # to a Tool Orchestration Service. If the toolService flag is "false", this has no effect.
    # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.11/#networkpolicypeer-v1-networking-k8s-io
    #
    toolServiceSelectors: []

    # networkPolicy.codedx.ingressSelectors is an optional list of selectors to attach to Code Dx
    # ingress rules. Pods matched here will be allowed to connect to Code Dx over HTTP (port 8080).
    # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.11/#networkpolicypeer-v1-networking-k8s-io
    #
    ingressSelectors: []
    # - podSelector:
    #     matchLabels:
    #       abc: "def"

  # NetworkPolicies for MariaDB pods will allow Ingress from only Code Dx and other MariaDB pods. Egress is
  # allowed to other MariaDB instances. If metrics are enabled, the NetworkPolicies will also allow Ingress
  # on port 9090 from any source.
  #
  mariadb:
    master:
      # The flag networkPolicy.mariadb.master.create can be used to create a NetworkPolicy targeting
      # the MariaDB Master pod(s), allowing only ingress from Code Dx and MariaDB slaves. Egress is
      # disallowed. (The policy is modified appropriately if MariaDB metrics are enabled for Master.)
      #
      create: true

    slave:
      # The flag networkPolicy.mariadb.slave.create can be used to create a NetworkPolicy targeting
      # the MariaDB Slave pod(s), allowing only egress to MariaDB master pods. Ingress is disallowed.
      # (The policy is modified appropriately if MariaDB metrics are enabled for Slave.)
      #
      create: true


# Persistent storage options for Code Dx's /opt/codedx folder, referred to as its "appdata". This
# stores log files, analysis inputs, etc. - anything generated by or given to Code Dx. It's strongly
# recommended to increase the persistence.size value to suit your neads.
# ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims
#
persistence:
  # persistence.storageClass will force a specific storage method for Code Dx's appdata. This should
  # generally be left blank, so the storage provider can auto-select a backend.
  # ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#class-1
  #
  storageClass: ""

  # persistence.accessMode determines how the volume will be shared accross nodes. This should be left
  # as default.
  # ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes
  #
  accessMode: ReadWriteOnce

  # persistence.size determines how much space to request for Code Dx's appdata volume. This size
  # should probably be increased based on your needs before performing an install. You may find
  # Code Dx running out of space rather quickly.
  #
  size: 32Gi

  # persistence.existingClaim will force the chart to mount the given claim as Code Dx's
  # appdata volume. A new PersistentVolumeClaim will not be created if defined.
  existingClaim: ""


# Use the `ingress` object and its properties to configure how Ingress resources are generated
# for the new Code Dx service. You'll need to make sure an Ingress controller is installed
# in your cluster for these resources to have any effect.
# ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
#
ingress:

  # Set ingress.enabled to "true" to generate an Ingress rule that forwards request to Code Dx
  #
  enabled: false

  # Use ingress.annotations to attach extra annotations to each generated Ingress resource.
  #
  annotations:
    # Increase timeout duration for Code Dx live updates
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    # Remove file size limit, Code Dx enforces this internally
    nginx.ingress.kubernetes.io/proxy-body-size: "0"

  # Assume nginx ingress controller when configuring ingress annotations
  #
  assumeNginxIngressController: true

  # Use ingress.hosts to specify the set of hosts to create Ingress resources for.
  #
  hosts:

    # ingress.hosts[].name specifies the FQDN that Code Dx will be hosted on
    #
  - name: codedx.local

    # Set ingress.hosts[].tls to "true" to add HTTPS/TLS properties to the generated Ingress resource
    #
    tls: true

    # If tls is "true", ingress.hosts[].tlsSecret specifies the name of the TLS secret containing the key and certificate
    #
    tlsSecret: tls-secret

  # Use ingress.secrets[] to auto-create secrets with the given properties if they don't yet exist.
  #
  secrets: []
  #   # ingress.secrets[].name specifies the name of the secret to be created.
  #   #
  # - name:

  #   # ingress.secrets[].key specifies the base64-encoded TLS key for the secret.
  #   #
  #   key:

  #   # ingress.secrets[].keyFile specifies the location of a file containing the TLS key, which will be base64-encoded.
  #   # This value is ignored if `key` is defined.
  #   # _Note: This is a Local File Value and will only work if installing this chart from source._
  #   #
  #   keyFile:

  #   # ingress.secrets[].certificate specifies the base64-encoded TLS certificate for the secret.
  #   #
  #   certificate:

  #   # ingress.secrets[].certificateFile specifies the location of a file containing the TLS certificate, which will
  #   # be base64-encoded. This value is ignored if `certificate` is defined.
  #   # _Note: This is a Local File Value and will only work if installing this chart from source._
  #   #
  #   certificateFile:

# Use the `service` object and its properties to configure how the Service is generated
# for the new Code Dx service.
#
service:
  # Specify the type of service that will be exposing Code Dx. Acceptable values are:
  # ClusterIP, NodePort, LoadBalancer
  #
  # If left unassigned, this will have one of the following defaults:
  #   "ClusterIP"    - If "ingress.enabled" = true
  #   "LoadBalancer" - If "ingress.enabled" = false
  #
  type:
  
  annotations: {}



# Code Dx Properties Configuration
#
#
#   Code Dx can accept multiple "props" files at startup. This feature is used to store common
# properties in a ConfigMap (generated from the value at 'codedxProps.file'), and store more
# sensitive information as secrets.
#
# The file retrieved from the value `codedxProps.file` will be created as a ConfigMap and mounted
#   at /opt/codedx/codedx.props.
#
# MariaDB creds provided to this chart will be stored in a secret, containing a "props" file
#   to be mounted at /opt/codedx/codedx.mariadb.props.
#
# Additional sensitive information (ie LDAP config) can also be provided to Code Dx as secrets
#   mounted as prop files by adding to the "codedx.extraProps" list.

codedxProps:
  # Specify 'codedx.props.file' to create a config-map for Code Dx based on the given 'codedx.props' file.
  # If changed, the modified file should contain the database connection properties from the 'codedx.props'
  # file bundled with this chart.
  # _Note: This is a Local File Value and will only work if installing this chart from source._
  file: codedx.props

  # Specify 'codedxProps.configMap' to use an existing config-map for Code Dx.
  # This config-map MUST contain:
  # - a key named 'codedx.props' with the contents of the properties to use. Check the provided
  #   'codedx.props' file included with this chart and use the same 'swa.db.*' values to ensure that
  #   Code Dx properly connects to the generated MariaDB instances.
  # - a key named 'tomcat.env' with the `CATALINA_OPTS` values necessary to load any additional
  #   props files. (it must at least provide the path to the MariaDB creds.)
  #
  # (If both file and configMap are specified, the existing 'configMap' will be used
  #  and no new ConfigMap will be created.)
  # configMap: my-codedx-config-map

  # Specify annotations to attach to a generated ConfigMap
  annotations: {}
  #   abc: "123"
  #   def: "456"

  # Code Dx will mount a secret as a file, containing MariaDB connection info. Use codedxProps.dbconnection
  # to control how this secret is used.
  #
  # The MariaDB secret should have a `codedx.mariadb.props` key containing the text of a "props"-formatted
  # file that assigns `swa.db.user` and `swa.db.password`, ie:
  #
  # swa.db.user = root
  # swa.db.password = my-mariadb-password
  #
  # (Note that the URL for the MariaDB instance is assigned via the `codedxProps` configmap, not this secret.)
  #
  dbconnection:

    # The flag codedxProps.dbconnection.createSecret determines whether or not a new secret will be generated. This
    # value is ignored when .Values.mariadb.enabled is false.
    #
    createSecret: true

    # Use codedxProps.dbconnection.secretName to specify the name of an existing secret to use (if createSecret
    # is "false") or the name of the secret to be created (if createSecret is "true").
    #
    secretName:

    # Use codedxProps.dbconnection.annotations to attach extra annotations to a generated secret.
    #
    annotations: {}

    # Use externalDbUrl to specify the database URL of an external MariaDB instance. This value is ignored
    # when .Values.mariadb.enabled is true.
    #
    externalDbUrl:

  # Use codedxProps.extra to specify extra codedx.props values that can be included either from a pre-existing
  # secret or from values in the given entry. Use this for sensitive info, ie LDAP config, or for convenience
  # when setting some non-sensitive property without adding a new props file. Secrets and configmaps will be
  # mounted as /opt/codedx/<key-name> and given to Code Dx. Make sure the name doesn't conflict with other prop
  # file names. ("codedx.props" and "codedx.mariadb.props" are reserved.)
  #
  extra: []

  # codedxProps.extra[].type can be assigned to either "secret" or "values". "secret" will load all keys from
  # a pre-existing secret, while "values" will add a configmap entry with the given properties.
  #

  # codedxProps.extra[].name is used with "type=secret", and is the name of the pre-existing secret
  # that will be mounted and loaded into Code Dx.
  #

  # codedxProps.extra[].key determines the key in the configmap or secret to mount as a props file.
  #

  # codedxProps.extra[].values is used with "type=values", and is a list of settings that will be placed
  # in the generated props file verbatim.
  #
  
  # - type: secret
  #   name: my-ldap-secret
  #   key: ldap-props

  # - type: values
  #   key: my-other-props
  #   values:
  #   - "some.prop = some value"
  #   - "other.prop = other value"


license: {}
  # Specify 'codedx.license.file' to automatically create a secret based on the given license
  #
  # _Note: This is a Local File Value and will only work if installing this chart from source._
  # file: my-license-file.lic

  # Specify 'codedx.license.secret' to use an existing secret for the Code Dx license. This secret MUST
  # contain a key named 'license.lic' with the contents of the license to use.
  #
  # (If both file and secret are specified, the existing 'secret' will be used and no new secret
  #  will be created.)
  #
  # secret: my-codedx-license-secret

  # Specify annotations to attach to a generated Secret
  #
  # annotations:
  #   abc: "123"
  #   def: "456"


# Use `loggingConfigFile` to specify a local "logback.xml" file to be inserted into the Code Dx configmap and used,
# allowing you to customize how Code Dx filters its logs. The logback.xml file provided with this chart logs to both
# stdout and to a rolling log file. This file mounts to `/opt/codedx/logback.xml`.
# _Note: This is a Local File Value and will only work if installing this chart from source._
# ref: https://logback.qos.ch/manual/configuration.html
#
loggingConfigFile: logback.xml

# Use 'samldpXmlFile' to provide an XML file for your Identity Provider when using SAML. The contents
# of this file will be mounted at `/opt/codedx/saml-idp.xml`.
#
# If using SAML, the `auth.saml2.identityProviderMetadataPath` Code Dx property will automatically
# be assigned. You'll still need to provide the following props in a separate secret:
# - auth.saml2.keystorePassword
# - auth.saml2.privateKeyPassword
# - auth.hostBasePath
#
# Use the "codedxProps.extra" value to provide the needed configuration.
# _Note: This is a Local File Value and will only work if installing this chart from source._
#
samlIdpXmlFile:

# Use 'extraMounts' to mount any additional, pre-existing data that may be necessary for your Code Dx
# installation via config-maps, secrets, PVs, etc. Uses original Volume mounting syntax; see
# 'ref' below.
#
# Volumes are mounted at `target` and subpath `name`.
# 
# This can be useful if providing files to Code Dx, since external files can't be accessed by the
# chart.
#
# ref: https://kubernetes.io/docs/concepts/storage/volumes/#types-of-volumes
#
extraMounts: []
# - name: sample-extra-mount
#   mount:
#     mountPath: /opt/codedx/example.txt
#     subPath: example.txt
#   volume:
#     configMap:
#       name: my-configmap
#       items:
#       - key: some-key
#         path: some-key

# Specify CPU/memory resource requests/limits for Code Dx on Tomcat.
# ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
#
resources: {}

# Use nodeSelectors to influence the scheduling of your Code Dx pod.
#
# For example, run this command to tag a node with codedx-app-node:
# kubectl label nodes cluster-node tag=codedx-app-node 
#
# Then use this configuration to create a node selector for the Code Dx application:
#
# nodeSelectors:
#   tag: codedx-app-node
#
nodeSelectors: {}

# Use tolerations to influence the scheduling of your Code Dx pod.
#
# For example, run these commands to add codedx-app-node taints to a node:
#
# kubectl taint nodes cluster-node dedicated=codedx-app-node:NoSchedule
# kubectl taint nodes cluster-node dedicated=codedx-app-node:NoExecute
#
# Then use this configuration to create a toleration for codedx-app-node:
#
# tolerations:
# - key: 'dedicated'
#   operator: 'Equal'
#   value: 'codedx-app-node'
#   effect: 'NoSchedule'
# - key: 'dedicated'
#   operator: 'Equal'
#   value: 'codedx-app-node'
#   effect: 'NoExecute'
#
tolerations: {}

# Use 'codedxTls' properties to enable and configure HTTPS on Code Dx directly through Tomcat. If
# an Ingress is being used and is configured in this chart, the Ingress will also use HTTPS when
# communicating with Code Dx.
#
codedxTls:
  # 'codedxTls.enabled' determines whether or not to enable TLS support directly within Code Dx.
  # A secret must be created beforehand to store the certificate data.
  #
  enabled: false
  # 'codedxTls.secret' is the name of the secret containing the certificate for Code Dx to use
  # when accepting requests over HTTPS.
  #
  secret: 'codedx-tls-secret'
  # 'codedxTls.certFile' is the name of the entry within the provided secret containing
  # the certificate file.
  #
  certFile: 'codedx-cert.pem'
  # 'codedxTls.keyFile' is the name of the entry within the provided secret containing
  # the key file.
  #
  keyFile: 'codedx-cert.key'

priorityClassValue: 10100

# Code Dx-specific MariaDB configuration. This should usually be left untouched, unless changing database passwords or
# opting to use an external MariaDB instance by setting mariadb.enabled to false. When using an external MariaDB instance,
# you must specify a value for codedxProps.dbconnection.externalDbUrl and create your own k8s secret containing a MariaDB 
# credential (refer to the codedxProps.dbconnection section for details).
#
mariadb:
  # Enable installation of the MariaDB chart to create a Code Dx database host. Set to false when using Code Dx 
  # with an external MariaDB instance whose connection details can be found in codedxProps.dbconnection.
  enabled: true
  image:
    tag: 10.3.22
  db:
    # Name of the database for MariaDB to create automatically
    name: codedx
  
  # use existing secret, with fields mariadb-root-password and mariadb-replication-password, as 
  # an alternative to rootUser.password and replication.password
  existingSecret:
  rootUser:
    password: 5jqJL2b8hqn3
  replication:
    password: 11uAQKLgv4JM
  
  serviceAccount:
    # Enable the creation of a MariaDB ServiceAccount for use in PodSecurityPolicies. Note that this version
    # of the MariaDB chart doesn't create its own ServiceAccount, so the Code Dx chart creates it instead.
    create: true

  # Configuration files for the MariaDB Master and Slave DBs. These are mostly copies of the original config,
  # with some changes made to optimize Code Dx performance.
  master:
    persistence:
      # Use default storage class for master/slave PVCs
      storageClass: 
      size: 32Gi
    priorityClassValue: 10200
    config: |-
      [mysqld]
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mariadb
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      tmpdir=/opt/bitnami/mariadb/tmp
      max_allowed_packet=16M
      bind-address=0.0.0.0
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
      log-error=/opt/bitnami/mariadb/logs/mysqld.log
      character-set-server=UTF8
      collation-server=utf8_general_ci
      optimizer_search_depth=0
      innodb_flush_log_at_trx_commit=0

      [client]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      default-character-set=UTF8

      [manager]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
  slave:
    persistence:
      # Use default storage class for master/slave PVCs
      storageClass: 
      size: 32Gi
      backup:
        size: 32Gi
    priorityClassValue: 10200
    config: |-
      [mysqld]
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mariadb
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      tmpdir=/opt/bitnami/mariadb/tmp
      max_allowed_packet=16M
      bind-address=0.0.0.0
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
      log-error=/opt/bitnami/mariadb/logs/mysqld.log
      character-set-server=UTF8
      collation-server=utf8_general_ci
      optimizer_search_depth=0
      innodb_flush_log_at_trx_commit=0

      [client]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      default-character-set=UTF8

      [manager]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
