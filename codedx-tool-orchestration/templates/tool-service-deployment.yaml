apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ include "codedx-tool-orchestration.fullname" . | quote }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "codedx-tool-orchestration.commonLabels" . | nindent 4 }}
    component: frontend
spec:
  strategy:
{{ toYaml (required "deploymentStrategy is required" .Values.deploymentStrategy) | indent 4 }}
  replicas: {{ required "numReplicas is required" .Values.numReplicas }}
  selector:
    matchLabels:
      app: {{ include "codedx-tool-orchestration.name" . | quote }}
      release: {{ .Release.Name | quote }}
      component: frontend
  template:
    metadata:
      labels:
        {{- include "codedx-tool-orchestration.commonLabels" . | nindent 8 }}
        component: frontend
    spec:
      {{ if .Values.toolServiceImagePullSecrets -}}
      imagePullSecrets: {{ toYaml .Values.toolServiceImagePullSecrets | nindent 6 -}}
      {{ end -}}
      serviceAccountName: {{ include "codedx-tool-orchestration.serviceAccountName" . | quote }}
      serviceAccount: {{ include "codedx-tool-orchestration.serviceAccountName" . | quote }}
      containers:
      - name: tool-service
        image: {{ .Values.toolServiceImageName | quote }}
        command: ["/opt/codedx/service/bin/service"]
        args: ["-adminApiKeyPath", "/opt/codedx/service/secrets/adminApiKey",
          "-codeDxBaseUrl", "{{ required "codedxBaseUrl is required" .Values.codedxBaseUrl }}",
          "-codeDxCaConfigMapName", "{{ .Values.codedxTls.caConfigMap }}",
          "-imageNameCodeDxTools", "{{ required "imageNameCodeDxTools is required" .Values.imageNameCodeDxTools }}",
          "-imageNameCodeDxToolsMono", "{{ required "imageNameCodeDxToolsMono is required" .Values.imageNameCodeDxToolsMono }}",
          "-imageNameNewAnalysis", "{{ required "imageNameNewAnalysis is required" .Values.imageNameNewAnalysis }}",
          "-imageNameSendErrorResults", "{{ required "imageNameSendErrorResults is required" .Values.imageNameSendErrorResults }}",
          "-imageNameSendResults", "{{ required "imageNameSendResults is required" .Values.imageNameSendResults }}",
          "-imagePullSecretKey", "{{ .Values.imagePullSecretKey }}",
          "-kubernetesNamespace", "{{ .Release.Namespace }}",
          "-logFile", "/opt/codedx/service/logs/service.log",
          "-logMaxSizeMB", "{{ .Values.logs.maxSizeMB }}",
          "-logMaxBackups", "{{ .Values.logs.maxBackups }}",
          "-minioAdminClientPath", "/opt/codedx/service/tools/mc",
          "-minioAdminPasswordPath", "/opt/codedx/service/secrets/minioAdminPassword",
          "-minioAdminUsernamePath", "/opt/codedx/service/secrets/minioAdminUsername",
          "-minioEndpoint", "{{ template "minio.ref.fullname" . }}:{{.Values.minio.service.port}}",
          {{ if .Values.minio.tls.enabled -}}
          "-minioTlsEnabled",
          {{ if .Values.minioTlsTrust.configMapName -}}
          "-minioTlsConfigMapName", "{{ .Values.minioTlsTrust.configMapName }}",
          "-minioTlsConfigMapPublicCertName", "{{ .Values.minioTlsTrust.configMapPublicCertKeyName }}",
          {{ end -}}
          {{ end -}}
          "-port", "{{ required "toolServicePort is required" .Values.toolServicePort }}",
          "-serviceName", "{{ .Release.Name }}",
          {{ if .Values.toolServiceTls.secret -}}
          "-serviceTlsCertPath", "/opt/codedx/service/tls/{{ .Values.toolServiceTls.certFile }}",
          "-serviceTlsKeyPath", "/opt/codedx/service/tls/{{ .Values.toolServiceTls.keyFile }}",
          {{ end -}}
          "-validateLicensePath", "/opt/codedx/service/bin/validate-license-1.0.0.jar",
          "-workDir", "/opt/codedx/service/work",
          "-workflowRoleNames", {{ include "codedx-tool-orchestration.workflow.role.name" . }}]
        readinessProbe:
          {{ if .Values.toolServiceTls.secret -}}
          tcpSocket:
            port: 3333
          {{ end -}}
          {{ if not .Values.toolServiceTls.secret -}}
          httpGet:
            path: /alive
            port: 3333
          {{ end -}}
          initialDelaySeconds: 3
          periodSeconds: 1
          failureThreshold: 60
        livenessProbe:
          tcpSocket:
            port: 3333
          initialDelaySeconds: 30
          periodSeconds: 5
        volumeMounts:
        - name: tool-service-secret-volume
          mountPath: "/opt/codedx/service/secrets"
          readOnly: true
        {{ if and .Values.minio.tls.enabled .Values.minioTlsTrust.configMapName -}}
        - name: minio-cert-volume
          mountPath: /etc/ssl/certs/cdx-minio.pem
          subPath: cdx-minio.pem
          readOnly: true
        {{ end -}}
        {{ if .Values.toolServiceTls.secret -}}
        - name: tool-service-tls-volume
          mountPath: "/opt/codedx/service/tls"
        {{ end -}}
        ports:
        - containerPort: 3333
          name: http
      volumes:
      - name: tool-service-secret-volume
        secret:
          secretName: {{ include "codedx-tool-orchestration.secretName" . | quote }}
      {{ if and .Values.minio.tls.enabled .Values.minioTlsTrust.configMapName -}}
      - name: minio-cert-volume
        configMap:
          name: {{ .Values.minioTlsTrust.configMapName }}
          items:
            - key: {{ .Values.minioTlsTrust.configMapPublicCertKeyName }}
              path: cdx-minio.pem
      {{ end -}}
      {{ if .Values.toolServiceTls.secret -}}
      - name: tool-service-tls-volume
        secret:
          secretName: {{ .Values.toolServiceTls.secret }}
      {{ end -}}
      - name: logs
        emptyDir: {}
