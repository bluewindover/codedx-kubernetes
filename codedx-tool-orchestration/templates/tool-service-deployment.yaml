apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ include "codedx-tool-orchestration.fullname" . | quote }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "codedx-tool-orchestration.commonLabels" . | nindent 4 }}
    app.kubernetes.io/component: frontend
spec:
  strategy:
{{ toYaml (required "deploymentStrategy is required" .Values.deploymentStrategy) | indent 4 }}
  replicas: {{ required "numReplicas is required" .Values.numReplicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "codedx-tool-orchestration.name" . | quote }}
      app.kubernetes.io/instance: {{ .Release.Name | quote }}
      app.kubernetes.io/component: frontend
  template:
    metadata:
      labels:
        {{- include "codedx-tool-orchestration.commonLabels" . | nindent 8 }}
        app.kubernetes.io/component: frontend
        codedx.com-instance: {{ .Release.Name | quote }}
    spec:
      {{ if .Values.toolServiceImagePullSecrets -}}
      imagePullSecrets: {{ toYaml .Values.toolServiceImagePullSecrets | nindent 6 -}}
      {{ end -}}
      serviceAccountName: {{ include "codedx-tool-orchestration.serviceAccountName" . | quote }}
      serviceAccount: {{ include "codedx-tool-orchestration.serviceAccountName" . | quote }}
      containers:
      - name: tool-service
        image: {{ .Values.toolServiceImageName | quote }}
        command: ["/opt/codedx/service/bin/service"]
        args: ["-adminApiKeyPath", "/opt/codedx/service/secrets/adminApiKey",
          "-codeDxBaseUrl", "{{ required "codeDxBaseUrl is required" .Values.codeDxBaseUrl }}",
          "-imageNameCodeDxTools", "{{ required "imageNameCodeDxTools is required" .Values.imageNameCodeDxTools }}",
          "-imageNameCodeDxToolsMono", "{{ required "imageNameCodeDxToolsMono is required" .Values.imageNameCodeDxToolsMono }}",
          "-imageNameNewAnalysis", "{{ required "imageNameNewAnalysis is required" .Values.imageNameNewAnalysis }}",
          "-imageNameSendResults", "{{ required "imageNameSendResults is required" .Values.imageNameSendResults }}",
          "-imageNameZap", "{{ required "imageNameZap is required" .Values.imageNameZap }}",
          "-imagePullSecretKey", "{{ .Values.imagePullSecretKey }}",
          "-kubeconfigPath", "",
          "-kubernetesNamespace", "{{ .Release.Namespace }}",
          "-logFile", "/opt/codedx/service/logs/service.log",
          "-minioAdminPasswordPath", "/opt/codedx/service/secrets/minioAdminPassword",
          "-minioAdminUsernamePath", "/opt/codedx/service/secrets/minioAdminUsername",
          "-minioClientPath", "/opt/codedx/service/tools/mc",
          "-minioClusterEndpoint", "{{ template "minio.ref.fullname" . }}:{{.Values.minio.service.port}}",
          "-minioEndpoint", "{{ template "minio.ref.fullname" . }}:{{.Values.minio.service.port}}",
          "-port", "{{ required "toolServicePort is required" .Values.toolServicePort }}",
          "-serviceName", "{{ .Release.Name }}",
          "-workDir", "/opt/codedx/service/work",
          "-workflowRoleNames", {{ include "codedx-tool-orchestration.workflow.role.name" . }}]
        securityContext:
          # ID of "service" account in tool orchestration image
          runAsUser: 1000
        readinessProbe:
          httpGet:
            path: /admin/isAlive
            port: 3333
          initialDelaySeconds: 3
          periodSeconds: 1
          failureThreshold: 60
        livenessProbe:
          tcpSocket:
            port: 3333
          initialDelaySeconds: 30
          periodSeconds: 5
        volumeMounts:
        - name: tool-service-secret-volume
          mountPath: "/opt/codedx/service/secrets"
          readOnly: true
        ports:
        - containerPort: 3333
          name: http
      volumes:
      - name: tool-service-secret-volume
        secret:
          secretName: {{ include "codedx-tool-orchestration.secretName" . | quote }}
      - name: logs
        emptyDir: {}
