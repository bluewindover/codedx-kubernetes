{{- if .Values.networkPolicy.enabled -}}
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: {{ include "codedx-tool-orchestration.fullname" . | quote }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "codedx-tool-orchestration.commonLabels" . | nindent 4 }}
spec:
  podSelector:
    matchLabels:
      app: {{ include "codedx-tool-orchestration.name" . | quote }}
      release: {{ .Release.Name | quote }}
      part-of: codedx-tool-orchestration
      component: frontend
  egress:
  - ports:
    - port: {{ required "kubeapi-server port must be defined" .Values.networkPolicy.kubeApiPort }}
      protocol: TCP
    {{- if .Values.networkPolicy.apiServerSelectors }}
    to:
{{ toYaml .Values.networkPolicy.apiServerSelectors | indent 4 }}
    {{- end }}
  - ports:
    - port: 53
      protocol: TCP
    - port: 53
      protocol: UDP
  - to:
{{ toYaml .Values.networkPolicy.codeDxSelectors | indent 4 }}
    ports:
    - port: 8080
  - to:
    - podSelector:
        matchLabels:
          app: {{ include "minio.ref.name" . }}
          release: {{ .Release.Name | quote }}
    ports:
    - port: 9000
  ingress:
  - from:
{{ toYaml .Values.networkPolicy.codeDxSelectors | indent 4 }}
    ports:
    - port: 3333
---
{{ end }}
{{ if .Values.networkPolicy.argoEnabled }}
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  {{- $fullName := printf "%s-%s" (include "codedx-tool-orchestration.fullname" .) "argo" }}
  {{- $safeName := (include "sanitize" $fullName) }}
  name: {{ $safeName | quote }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "codedx-tool-orchestration.commonLabels" . | nindent 4 }}
spec:
  podSelector:
    matchLabels:
      # From argo deployment spec:
      # https://github.com/argoproj/argo-helm/blob/master/charts/argo/templates/workflow-controller-deployment.yaml#L14
      app: '{{ .Release.Name }}-{{ .Values.argo.controller.name }}'
      release: {{ .Release.Name | quote }}
  egress:
  - ports:
    - port: {{ required "kubeapi-server port must be defined" .Values.networkPolicy.kubeApiPort }}
      protocol: TCP
    {{- if .Values.networkPolicy.apiServerSelectors }}
    to:
{{ toYaml .Values.networkPolicy.apiServerSelectors }}
    {{- end }}
  policyTypes:
  - Ingress
  - Egress
---
{{- end }}
{{ if .Values.networkPolicy.minioEnabled -}}
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  {{- $fullName := printf "%s-%s" (include "codedx-tool-orchestration.fullname" .) "minio" }}
  {{- $safeName := (include "sanitize" $fullName) }}
  name: {{ $safeName | quote }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "codedx-tool-orchestration.commonLabels" . | nindent 4 }}
spec:
  podSelector:
    matchLabels:
      app: {{ include "minio.ref.name" . | quote }}
      release: {{ .Release.Name | quote }}
  policyTypes: ["Egress"]
---
{{- end }}
{{ if .Values.networkPolicy.twsWorkflowsEnabled -}}
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  {{- $fullName := printf "%s-%s" (include "codedx-tool-orchestration.fullname" .) "workflow" }}
  {{- $safeName := (include "sanitize" $fullName) }}
  name: {{ $safeName | quote }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "codedx-tool-orchestration.commonLabels" . | nindent 4 }}
spec:
  podSelector:
    matchLabels:
      workflowOwner: {{ .Release.Name | quote }}
  egress:
  - {}
  policyTypes: ["Ingress", "Egress"]
---
{{- end -}}